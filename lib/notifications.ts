"use server"

import { auth } from "@clerk/nextjs/server"
import { createServerSupabaseClient } from "@/lib/supabase"
import { revalidatePath } from "next/cache"

// Tipos para las notificaciones
export type NotificationType = "system" | "recipe" | "analysis" | "shopping_list"

export interface Notification {
  id: string
  title: string
  message: string
  type: NotificationType
  link?: string
  read: boolean
  created_at: string
  user_id: string
}

// Funci√≥n para crear una nueva notificaci√≥n
export async function createNotification({
  title,
  message,
  type,
  link,
}: {
  title: string
  message: string
  type: NotificationType
  link?: string
}) {
  console.log("üîî Creando notificaci√≥n:", title)

  const { userId } = auth()

  if (!userId) {
    console.error("‚ùå Usuario no autenticado")
    throw new Error("Usuario no autenticado")
  }

  try {
    console.log("üîå Creando cliente de Supabase")
    const supabase = createServerSupabaseClient()

    // Obtener el ID del perfil del usuario
    console.log("üîç Obteniendo perfil del usuario:", userId)
    const { data: profile, error: profileError } = await supabase
      .from("profiles")
      .select("id")
      .eq("clerk_id", userId)
      .single()

    if (profileError) {
      console.error("‚ùå Error al obtener perfil:", profileError)
      throw profileError
    }

    console.log("‚úÖ Perfil obtenido:", profile.id)

    // Crear la notificaci√≥n
    console.log("‚ûï Creando notificaci√≥n para usuario:", profile.id)
    const { data: notification, error: notificationError } = await supabase
      .from("notifications")
      .insert({
        user_id: profile.id,
        title,
        message,
        type,
        link,
        read: false,
      })
      .select()
      .single()

    if (notificationError) {
      console.error("‚ùå Error al crear notificaci√≥n:", notificationError)
      throw notificationError
    }

    console.log("‚úÖ Notificaci√≥n creada correctamente:", notification.id)

    revalidatePath("/app")
    revalidatePath("/profile")

    return { success: true, notification }
  } catch (error) {
    console.error("‚ùå Error al crear notificaci√≥n:", error)
    return { success: false, error: "Error al crear notificaci√≥n" }
  }
}

// Funci√≥n para obtener las notificaciones del usuario
export async function getUserNotifications() {
  console.log("üîî Obteniendo notificaciones del usuario")

  const { userId } = auth()

  if (!userId) {
    console.error("‚ùå Usuario no autenticado")
    throw new Error("Usuario no autenticado")
  }

  try {
    console.log("üîå Creando cliente de Supabase")
    const supabase = createServerSupabaseClient()

    // Obtener el ID del perfil del usuario
    console.log("üîç Obteniendo perfil del usuario:", userId)
    const { data: profile, error: profileError } = await supabase
      .from("profiles")
      .select("id")
      .eq("clerk_id", userId)
      .single()

    if (profileError) {
      console.error("‚ùå Error al obtener perfil:", profileError)
      return { success: false, error: "Perfil de usuario no encontrado" }
    }

    console.log("‚úÖ Perfil obtenido:", profile.id)

    // Obtener las notificaciones del usuario ordenadas por fecha (m√°s recientes primero)
    console.log("üîç Obteniendo notificaciones para usuario:", profile.id)
    const { data: notifications, error } = await supabase
      .from("notifications")
      .select("*")
      .eq("user_id", profile.id)
      .order("created_at", { ascending: false })

    if (error) {
      console.error("‚ùå Error al obtener notificaciones:", error)
      throw error
    }

    console.log("‚úÖ Notificaciones obtenidas:", notifications.length)

    return { success: true, notifications }
  } catch (error) {
    console.error("‚ùå Error al obtener notificaciones:", error)
    return { success: false, error: "Error al obtener notificaciones" }
  }
}

// Funci√≥n para marcar una notificaci√≥n como le√≠da
export async function markNotificationAsRead(notificationId: string) {
  console.log("üîî Marcando notificaci√≥n como le√≠da:", notificationId)

  const { userId } = auth()

  if (!userId) {
    console.error("‚ùå Usuario no autenticado")
    throw new Error("Usuario no autenticado")
  }

  try {
    console.log("üîå Creando cliente de Supabase")
    const supabase = createServerSupabaseClient()

    // Marcar la notificaci√≥n como le√≠da
    console.log("‚úèÔ∏è Actualizando notificaci√≥n:", notificationId)
    const { error } = await supabase.from("notifications").update({ read: true }).eq("id", notificationId)

    if (error) {
      console.error("‚ùå Error al marcar notificaci√≥n como le√≠da:", error)
      throw error
    }

    console.log("‚úÖ Notificaci√≥n marcada como le√≠da correctamente")

    revalidatePath("/app")
    revalidatePath("/profile")

    return { success: true }
  } catch (error) {
    console.error("‚ùå Error al marcar notificaci√≥n como le√≠da:", error)
    return { success: false, error: "Error al marcar notificaci√≥n como le√≠da" }
  }
}

// Funci√≥n para marcar todas las notificaciones como le√≠das
export async function markAllNotificationsAsRead() {
  console.log("üîî Marcando todas las notificaciones como le√≠das")

  const { userId } = auth()

  if (!userId) {
    console.error("‚ùå Usuario no autenticado")
    throw new Error("Usuario no autenticado")
  }

  try {
    console.log("üîå Creando cliente de Supabase")
    const supabase = createServerSupabaseClient()

    // Obtener el ID del perfil del usuario
    console.log("üîç Obteniendo perfil del usuario:", userId)
    const { data: profile, error: profileError } = await supabase
      .from("profiles")
      .select("id")
      .eq("clerk_id", userId)
      .single()

    if (profileError) {
      console.error("‚ùå Error al obtener perfil:", profileError)
      throw profileError
    }

    console.log("‚úÖ Perfil obtenido:", profile.id)

    // Marcar todas las notificaciones como le√≠das
    console.log("‚úèÔ∏è Actualizando notificaciones para usuario:", profile.id)
    const { error } = await supabase
      .from("notifications")
      .update({ read: true })
      .eq("user_id", profile.id)
      .eq("read", false)

    if (error) {
      console.error("‚ùå Error al marcar notificaciones como le√≠das:", error)
      throw error
    }

    console.log("‚úÖ Notificaciones marcadas como le√≠das correctamente")

    revalidatePath("/app")
    revalidatePath("/profile")

    return { success: true }
  } catch (error) {
    console.error("‚ùå Error al marcar notificaciones como le√≠das:", error)
    return { success: false, error: "Error al marcar notificaciones como le√≠das" }
  }
}

// Funci√≥n para eliminar una notificaci√≥n
export async function deleteNotification(notificationId: string) {
  console.log("üîî Eliminando notificaci√≥n:", notificationId)

  const { userId } = auth()

  if (!userId) {
    console.error("‚ùå Usuario no autenticado")
    throw new Error("Usuario no autenticado")
  }

  try {
    console.log("üîå Creando cliente de Supabase")
    const supabase = createServerSupabaseClient()

    // Eliminar la notificaci√≥n
    console.log("üóëÔ∏è Eliminando notificaci√≥n:", notificationId)
    const { error } = await supabase.from("notifications").delete().eq("id", notificationId)

    if (error) {
      console.error("‚ùå Error al eliminar notificaci√≥n:", error)
      throw error
    }

    console.log("‚úÖ Notificaci√≥n eliminada correctamente")

    revalidatePath("/app")
    revalidatePath("/profile")

    return { success: true }
  } catch (error) {
    console.error("‚ùå Error al eliminar notificaci√≥n:", error)
    return { success: false, error: "Error al eliminar notificaci√≥n" }
  }
}
