import { type NextRequest, NextResponse } from "next/server"
import { generateText } from "ai"
import { openai } from "@ai-sdk/openai"
import { z } from "zod"
import { rateLimit } from "@/lib/rate-limit"
import { auth } from "@clerk/nextjs/server"
import { createServerSupabaseClient } from "@/lib/supabase"

// Esquema de validaci√≥n para la imagen
const imageSchema = z.object({
  size: z
    .number()
    .min(1)
    .max(10 * 1024 * 1024), // M√°ximo 10MB
  type: z.string().refine((type) => type.startsWith("image/"), { message: "El archivo debe ser una imagen" }),
})

// Datos de ejemplo para usar cuando la API no est√° disponible
const FALLBACK_DATA = {
  ingredientes: ["Tomates", "Cebolla", "Pimiento", "Ajo", "Huevos", "Queso", "Leche", "Mantequilla"],
  recetas: [
    {
      titulo: "Tortilla de Verduras",
      descripcion: "Una deliciosa tortilla con las verduras de tu nevera",
      ingredientes: {
        disponibles: ["Huevos", "Cebolla", "Pimiento", "Queso"],
        adicionales: ["Sal", "Pimienta", "Aceite de oliva"],
      },
      preparacion: [
        "Corta la cebolla y el pimiento en trozos peque√±os.",
        "Bate los huevos en un recipiente y a√±ade sal y pimienta al gusto.",
        "Calienta aceite en una sart√©n y sofr√≠e la cebolla y el pimiento hasta que est√©n tiernos.",
        "A√±ade los huevos batidos y cocina a fuego medio-bajo.",
        "Cuando est√© casi cuajada, a√±ade el queso rallado por encima.",
        "Dobla la tortilla por la mitad y sirve caliente.",
      ],
      calorias: 320,
    },
    {
      titulo: "Salsa de Tomate Casera",
      descripcion: "Una salsa vers√°til para pasta, pizza o como acompa√±amiento",
      ingredientes: {
        disponibles: ["Tomates", "Cebolla", "Ajo"],
        adicionales: ["Aceite de oliva", "Sal", "Pimienta", "Albahaca"],
      },
      preparacion: [
        "Pica finamente la cebolla y el ajo.",
        "Calienta aceite en una sart√©n y sofr√≠e la cebolla y el ajo hasta que est√©n transparentes.",
        "A√±ade los tomates cortados en cubos y cocina a fuego medio durante 15-20 minutos.",
        "Sazona con sal y pimienta al gusto.",
        "Si lo deseas, a√±ade albahaca fresca picada al final de la cocci√≥n.",
      ],
      calorias: 180,
    },
    {
      titulo: "Queso a la Plancha con Tomate",
      descripcion: "Un aperitivo r√°pido y sabroso",
      ingredientes: {
        disponibles: ["Queso", "Tomates"],
        adicionales: ["Pan", "Or√©gano", "Aceite de oliva"],
      },
      preparacion: [
        "Corta el queso en rebanadas de aproximadamente 1 cm de grosor.",
        "Calienta una sart√©n antiadherente a fuego medio-alto.",
        "Coloca las rebanadas de queso en la sart√©n y cocina hasta que se doren por ambos lados.",
        "Sirve el queso caliente con rodajas de tomate fresco.",
        "Roc√≠a con un poco de aceite de oliva y espolvorea or√©gano por encima.",
        "Acompa√±a con pan tostado si lo deseas.",
      ],
      calorias: 280,
    },
  ],
}

// Funci√≥n para sanitizar el texto (eliminar posibles scripts)
function sanitizeText(text: string): string {
  return text
    .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, "")
    .replace(/javascript:/gi, "")
    .replace(/on\w+=/gi, "")
}

// A√±adir soporte para GET para evitar el error 405
export async function GET() {
  return NextResponse.json(
    { success: false, error: "Este endpoint solo acepta solicitudes POST con una imagen" },
    { status: 400 },
  )
}

export async function POST(request: NextRequest) {
  console.log("üîç POST /api/analyze - Iniciando")

  try {
    // Aplicar rate limiting
    const rateLimitResult = await rateLimit(request)

    // Si el resultado es una respuesta, significa que se ha excedido el l√≠mite
    if (rateLimitResult instanceof NextResponse) {
      return rateLimitResult
    }

    // Continuar con los encabezados de rate limiting
    const headers = rateLimitResult.headers

    // Verificar l√≠mite de tama√±o antes de procesar
    const contentLength = request.headers.get("content-length")
    if (contentLength && Number.parseInt(contentLength) > 10 * 1024 * 1024) {
      return NextResponse.json(
        { success: false, error: "La solicitud excede el tama√±o m√°ximo permitido (10MB)" },
        { status: 413 },
      )
    }

    // Verificar el tipo de contenido
    const contentType = request.headers.get("content-type")
    if (!contentType || !contentType.includes("multipart/form-data")) {
      return NextResponse.json({ success: false, error: "Tipo de contenido no v√°lido" }, { status: 415 })
    }

    // Obtener la imagen del cuerpo de la solicitud
    const formData = await request.formData()
    const imageFile = formData.get("image") as File

    if (!imageFile) {
      console.error("‚ùå No se proporcion√≥ ninguna imagen")
      return NextResponse.json({ success: false, error: "No se proporcion√≥ ninguna imagen" }, { status: 400 })
    }

    // Validar la imagen
    try {
      imageSchema.parse({
        size: imageFile.size,
        type: imageFile.type,
      })
    } catch (validationError) {
      console.error("‚ùå Error de validaci√≥n:", validationError)
      return NextResponse.json(
        { success: false, error: "Imagen no v√°lida. Debe ser una imagen de menos de 10MB." },
        { status: 400 },
      )
    }

    console.log(
      "üì∏ Imagen recibida:",
      imageFile.name,
      "Tama√±o:",
      (imageFile.size / 1024).toFixed(2),
      "KB",
      "Tipo:",
      imageFile.type,
    )

    // Convertir la imagen a base64
    const arrayBuffer = await imageFile.arrayBuffer()
    const buffer = Buffer.from(arrayBuffer)
    const base64Image = buffer.toString("base64")
    const dataURI = `data:${imageFile.type};base64,${base64Image}`
    console.log("‚úÖ Imagen convertida a base64 (primeros 50 caracteres):", dataURI.substring(0, 50) + "...")

    let analysisData = FALLBACK_DATA

    try {
      console.log("üîç Iniciando an√°lisis de imagen con OpenAI...")
      console.log("üîë Verificando API key de OpenAI:", process.env.OPENAI_API_KEY ? "Disponible" : "No disponible")

      // Si hay API key de OpenAI, intentar usar la IA
      if (process.env.OPENAI_API_KEY) {
        try {
          const controller = new AbortController()
          const timeoutId = setTimeout(() => controller.abort(), 30000) // 30 segundos de timeout

          const { text } = await generateText({
            model: openai("gpt-4o"),
            messages: [
              {
                role: "system",
                content:
                  "Eres un experto nutricionista y chef que analiza im√°genes de alimentos. Debes calcular las calor√≠as de manera precisa bas√°ndote en los ingredientes identificados y las cantidades t√≠picas de cada receta. Siempre respondes con JSON v√°lido seg√∫n la estructura solicitada, sin texto adicional antes o despu√©s del JSON.",
              },
              {
                role: "user",
                content: [
                  {
                    type: "text",
                    text: `Analiza esta imagen de una nevera y lista todos los alimentos que puedes identificar. Luego, sugiere 3 recetas que se puedan preparar con estos ingredientes.

Para cada receta, incluye:
1. Un t√≠tulo descriptivo
2. Una breve descripci√≥n
3. Los ingredientes necesarios (indicando cu√°les est√°n en la nevera y cu√°les habr√≠a que a√±adir)
4. Los pasos de preparaci√≥n detallados
5. Una estimaci√≥n PRECISA de calor√≠as totales basada en:
   - Las cantidades t√≠picas de cada ingrediente para la receta
   - Los valores nutricionales reales de cada ingrediente
   - El m√©todo de cocci√≥n utilizado

IMPORTANTE: Las calor√≠as deben ser calculadas de manera precisa, no aproximadas. Considera las cantidades reales que se usar√≠an en cada receta.

Responde √öNICAMENTE con un objeto JSON v√°lido con esta estructura exacta:
{
  "ingredientes": ["ingrediente1", "ingrediente2", ...],
  "recetas": [
    {
      "titulo": "T√≠tulo de la receta",
      "descripcion": "Breve descripci√≥n",
      "ingredientes": {
        "disponibles": ["ingrediente1", ...],
        "adicionales": ["ingrediente3", ...]
      },
      "preparacion": ["paso1", "paso2", ...],
      "calorias": 350
    }
  ]
}`,
                  },
                  {
                    type: "image",
                    image: dataURI,
                  },
                ],
              },
            ],
            signal: controller.signal,
          })

          clearTimeout(timeoutId)

          console.log("‚úÖ Respuesta recibida de OpenAI (primeros 100 caracteres):", text.substring(0, 100) + "...")

          // Intentar parsear el JSON
          try {
            const jsonMatch = text.match(/\{[\s\S]*\}/)
            const jsonString = jsonMatch ? jsonMatch[0] : text
            const parsedData = JSON.parse(jsonString)

            // Sanitizar todos los textos para prevenir XSS
            parsedData.ingredientes = parsedData.ingredientes.map((ingrediente: string) => sanitizeText(ingrediente))

            parsedData.recetas = parsedData.recetas.map((receta: any) => {
              // Validar que las calor√≠as sean un n√∫mero v√°lido
              let calorias = receta.calorias
              if (typeof calorias !== "number" || isNaN(calorias) || calorias <= 0) {
                console.warn(
                  `‚ö†Ô∏è Calor√≠as inv√°lidas para receta "${receta.titulo}": ${calorias}. Usando valor por defecto.`,
                )
                calorias = 300 // Valor por defecto solo si GPT no proporciona un valor v√°lido
              }

              return {
                titulo: sanitizeText(receta.titulo),
                descripcion: sanitizeText(receta.descripcion),
                ingredientes: {
                  disponibles: receta.ingredientes.disponibles.map((i: string) => sanitizeText(i)),
                  adicionales: receta.ingredientes.adicionales.map((i: string) => sanitizeText(i)),
                },
                preparacion: receta.preparacion.map((paso: string) => sanitizeText(paso)),
                calorias: calorias,
              }
            })

            analysisData = parsedData
            console.log("‚úÖ JSON parseado correctamente:", Object.keys(analysisData))
            console.log("üìã Ingredientes encontrados:", analysisData.ingredientes.length)
            console.log("üçΩÔ∏è Recetas generadas:", analysisData.recetas.length)
            console.log(
              "üî• Calor√≠as por receta:",
              analysisData.recetas.map((r: any) => `${r.titulo}: ${r.calorias} kcal`),
            )
          } catch (parseError) {
            console.error("‚ùå Error parsing JSON response:", parseError)
            console.log("üìÑ Raw response:", text)
            console.log("‚ö†Ô∏è Usando datos de ejemplo como fallback")
            // analysisData ya est√° configurado con FALLBACK_DATA
          }
        } catch (openaiError) {
          console.error("‚ùå Error en la llamada a OpenAI:", openaiError)
          console.log("‚ö†Ô∏è Usando datos de ejemplo como fallback")
          // analysisData ya est√° configurado con FALLBACK_DATA
        }
      } else {
        console.log("‚ö†Ô∏è API key de OpenAI no disponible, usando datos de ejemplo")
      }
    } catch (apiError) {
      console.error("‚ùå Error al llamar a la API de OpenAI:", apiError)
      console.log("‚ö†Ô∏è Usando datos de ejemplo como fallback")
      // analysisData ya est√° configurado con FALLBACK_DATA
    }

    // Guardar el an√°lisis en la base de datos
    console.log("üíæ Guardando an√°lisis en la base de datos...")

    // Verificar autenticaci√≥n
    const authResult = await auth()
    const userId = authResult?.userId

    if (!userId) {
      console.log("‚ö†Ô∏è Usuario no autenticado, guardando solo en almacenamiento local")
      return NextResponse.json(
        {
          success: true,
          data: analysisData,
          analysisId: "local_" + Date.now(),
        },
        { headers },
      )
    }

    // Guardar en Supabase
    try {
      const supabase = createServerSupabaseClient()

      // Verificar si el perfil existe
      const { data: profile, error: profileError } = await supabase
        .from("profiles")
        .select("id")
        .eq("clerk_id", userId)
        .single()

      if (profileError) {
        console.error("‚ùå Error al obtener perfil:", profileError)

        // Crear perfil si no existe
        if (profileError.code === "PGRST116") {
          console.log("‚ûï Creando nuevo perfil para usuario:", userId)

          const { data: newProfile, error: createError } = await supabase
            .from("profiles")
            .insert({
              clerk_id: userId,
              email: `user_${userId}@example.com`,
              full_name: `Usuario ${userId.slice(-4)}`,
            })
            .select("id")
            .single()

          if (createError) {
            console.error("‚ùå Error al crear perfil:", createError)
            throw new Error("No se pudo crear el perfil de usuario")
          }

          console.log("‚úÖ Perfil creado correctamente:", newProfile.id)

          // Guardar an√°lisis con el nuevo perfil
          const { data: analysis, error: analysisError } = await supabase
            .from("analyses")
            .insert({
              user_id: newProfile.id,
              ingredients: analysisData.ingredientes,
              created_at: new Date().toISOString(),
            })
            .select("id")
            .single()

          if (analysisError) {
            console.error("‚ùå Error al guardar an√°lisis:", analysisError)
            throw new Error("Error al guardar an√°lisis")
          }

          console.log("‚úÖ An√°lisis guardado correctamente:", analysis.id)

          // Guardar recetas
          for (const receta of analysisData.recetas) {
            const { error: recipeError } = await supabase.from("recipes").insert({
              analysis_id: analysis.id,
              title: receta.titulo,
              description: receta.descripcion,
              available_ingredients: receta.ingredientes.disponibles,
              additional_ingredients: receta.ingredientes.adicionales,
              preparation_steps: receta.preparacion,
              calories: receta.calorias,
              created_at: new Date().toISOString(),
            })

            if (recipeError) {
              console.error("‚ùå Error al guardar receta:", recipeError)
              // Continuar con las siguientes recetas
            }
          }

          return NextResponse.json(
            {
              success: true,
              data: analysisData,
              analysisId: analysis.id,
            },
            { headers },
          )
        }

        throw new Error("Error al obtener perfil de usuario")
      }

      // Guardar an√°lisis con el perfil existente
      const { data: analysis, error: analysisError } = await supabase
        .from("analyses")
        .insert({
          user_id: profile.id,
          ingredients: analysisData.ingredientes,
          created_at: new Date().toISOString(),
        })
        .select("id")
        .single()

      if (analysisError) {
        console.error("‚ùå Error al guardar an√°lisis:", analysisError)
        throw new Error("Error al guardar an√°lisis")
      }

      console.log("‚úÖ An√°lisis guardado correctamente:", analysis.id)

      // Guardar recetas
      for (const receta of analysisData.recetas) {
        const { error: recipeError } = await supabase.from("recipes").insert({
          analysis_id: analysis.id,
          title: receta.titulo,
          description: receta.descripcion,
          available_ingredients: receta.ingredientes.disponibles,
          additional_ingredients: receta.ingredientes.adicionales,
          preparation_steps: receta.preparacion,
          calories: receta.calorias,
          created_at: new Date().toISOString(),
        })

        if (recipeError) {
          console.error("‚ùå Error al guardar receta:", recipeError)
          // Continuar con las siguientes recetas
        }
      }

      return NextResponse.json(
        {
          success: true,
          data: analysisData,
          analysisId: analysis.id,
        },
        { headers },
      )
    } catch (dbError) {
      console.error("‚ùå Error al guardar en base de datos:", dbError)

      // Devolver √©xito pero con ID local
      return NextResponse.json(
        {
          success: true,
          data: analysisData,
          analysisId: "local_" + Date.now(),
          dbError: true,
        },
        { headers },
      )
    }
  } catch (error) {
    console.error("‚ùå Error general en la ruta de API:", error)
    return NextResponse.json(
      {
        success: false,
        error: "Error interno del servidor",
      },
      { status: 500 },
    )
  }
}
